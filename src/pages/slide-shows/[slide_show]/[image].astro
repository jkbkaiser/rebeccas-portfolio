---
// TODO
// Custom layout
import { ViewTransitions } from "astro:transitions";
import circle from "../../../icon/circle.svg";
import circle_fill from "../../../icon/circle-fill.svg";
import arrow_left from "../../../icon/arrow-left.svg";

const { slide_show, image } = Astro.params;
const { background_color, images, total_images } = Astro.props;
const image_id = parseInt(image, 10);

const image_left = image_id == 0 ? "" : images[0].url;
const image_center = image_id == 0 ? images[0].url : images[1].url;
const image_right = image_id != 0 && images.length == 2 ? "" : images[images.length - 1].url;

const gallery_url = `../../galleries/${slide_show}`;
const base_url = `../../slide-shows/${slide_show}`;

type Image = {
    url: string;
    alt: string;
}

type PathParams = {
    slide_show: string;
    image: string;
}

type PathProps = {
    background_color: string;
    images: Image[];
    total_images: number;
}

type Path = {
  params: PathParams;
  props: PathProps;
};

export async function getStaticPaths() {
    function get_pagename_from_filename(filename: string) {
        return filename.split("/").slice(-1)[0].split(".md")[0];
    }

    const all_galleries = await Astro.glob("../../galleries/*.md");

    let paths: Path[] = [];
    for (const gallery of all_galleries) {
        var images = gallery.frontmatter.images;
        var image_groups = [];
        for (let i = 0; i < images.length; i += 1) {
            if (i == 0) {
                image_groups.push([images[i], images[i + 1]]);
            } else if (i == images.length - 1) {
                image_groups.push([images[i - 1], images[i]]);
            } else {
                image_groups.push([images[i - 1], images[i], images[i + 1]]);
            }
        }

        image_groups.map((image_group, index) => {
            paths.push({
                params: {
                    slide_show: get_pagename_from_filename(gallery.file),
                    image: index.toString(),
                },
                props: {
                    background_color: gallery.frontmatter.background_color,
                    images: image_group,
                    total_images: images.length,
                },
            })
        })
    }

    return paths;
}
---

<html>
    <head>
    <style define:vars={{ background_color }}>
        html, body {
            position: fixed;
            height: 100%;
            width: 100%;
            left: 0;
            right: 0;
            padding: 0;
            margin: 0;
            background-color: var(--background_color);
        }
        .navigation {
            width: 50%;
            height: 5vh;

            position: absolute;
            left: 50%;
            top: 90%;
            transform: translate(-50%, 0);

            display: flex;
            flex-direction: row;
            justify-content: center;
            align-items: center;
        }
        a {
            margin: 0 2vw;
            height: 5vh;
            width: 5vh;
            padding: 0;
            border: none;
            background: none;
            display: flex;
            justify-content: center;
            align-items: center;
        }
        .icon_wrapper_unselected {
            height: 50%;
        }
        .icon_wrapper_selected {
            height: 75%;
        }
        .icon_wrapper_unselected img {
            height: 100%;
        }
        .icon_wrapper_selected img {
            height: 100%;
        }
        .back {
            height: 5vh;
            width: 5vh;

            display: flex;
            justify-content: center;
            align-items: center;

            position: absolute;
            left: 100px;
            top: 90%;
        }
        .back img {
            height: 5vh;
            width: 5vh;
        }
        .display {
            height: 70%;
            width: 100%;

            position: absolute;
            left: 50%;
            top: 45%;
            transform: translate(-50%, -50%);
        }
        .display img {
            height: 100%;
        }
        #image_left {
            height: 50%;
            width: fit-content;

            position: absolute;
            top: 50%;
            left: 0px;
            transform: translate(-80%, -50%);
        }
        #image_center {
            height: 100%;
            width: fit-content;

            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
        }
        #image_right {
            height: 50%;
            width: fit-content;

            position: absolute;
            top: 50%;
            right: 0px;
            transform: translate(80%, -50%);
        }
        #image_right a {
            height: 100%;
            width: 100%;
        }
        #image_left a {
            height: 100%;
            width: 100%;
        }
    </style>
    <ViewTransitions />
    <title>{(slide_show[0].toUpperCase() + slide_show.slice(1)).replace(/\-/g, " ")}</title>
    </head>

    <!-- <div class="display" transition:animate={fade({ duration: '0.2s' })} > -->
    <div class="display" >
        <div id="image_left" >
            {
                image_id != 0 ?
                    <a href={`${base_url}/${image_id-1}`}>
                        <img src={image_left}/>
                    </a>
                :
                    <img src={image_left}/>
            }
        </div>
        <div id="image_center" transition:name="exp" >
            <img src={image_center}/>
        </div>
        <div id="image_right" transition:name="exp" >
            {
                image_id < total_images ?
                    <a href={`${base_url}/${image_id+1}`}>
                        <img src={image_right}/>
                    </a>
                :
                    <img src={image_right}/>
            }

        </div>
    </div>

    <div class="back" transition:persist>
        <a href={gallery_url} ><img src={arrow_left.src}/></a>
    </div>

    <div class="navigation">
        {
            Array.from({length: total_images}, (_, i) => {
                return (i == image_id ?
                    <a href={`${base_url}/${i}`} class="menu_button">
                        <div class="icon_wrapper_selected">
                            <img src={circle.src} alt="nav" />
                        </div>
                    </a>
                    :
                    <a href={`${base_url}/${i}`} class="menu_button">
                        <div class="icon_wrapper_unselected">
                            <img src={circle_fill.src} alt="nav" />
                        </div>
                    </a>
                );
            })
        }
    </div>

    <astro-listener
        data-imageid={image_id}
        data-totalimages={total_images}
        data-baseurl={base_url}
    />

    <script>
        import { navigate } from "astro:transitions/client";
        var pressed = false;

        class Listener extends HTMLElement {
            constructor() {
                super();

                if (this.dataset.imageid === undefined || this.dataset.totalimages === undefined) {
                    return;
                }

                var imageId = parseInt(this.dataset.imageid, 10);
                var totalImages = parseInt(this.dataset.totalimages, 10);
                var baseUrl = this.dataset.baseurl;
                pressed = false;

                function onClick(event: any) {
                    if (pressed) {
                        return false;
                    }

                    if (event.key === "ArrowLeft" && imageId != 0) {
                        navigate(`${baseUrl}/${imageId - 1}`);
                        pressed = true;
                        window.removeEventListener('keydown', onClick);
                    }

                    if (event.key === "ArrowRight" && imageId < totalImages - 1) {
                        navigate(`${baseUrl}/${imageId + 1}`);
                        pressed = true;
                        window.removeEventListener('keydown', onClick);
                    }
                }
                window.addEventListener('keydown', onClick);
            }
        }

        customElements.define('astro-listener', Listener);
    </script>
</html>
